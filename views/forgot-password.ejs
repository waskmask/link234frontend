<!DOCTYPE html>
<html lang="<%- __('lang') %>">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="shortcut icon"
      href="/public/images/linkhub-icon.png"
      type="image/x-icon"
    />
    <title><%= __('forgot_password') %> | Link234</title>
    <link rel="stylesheet" href="/public/style/theme.css" />
  </head>
  <body>
    <main>
      <div class="auth-wrapper">
        <div class="auth">
          <div class="logo">
            <img src="/public/images/logo-f1.svg" alt="Logo" />
          </div>
          <div class="max-500">
            <form id="passResetForm" novalidate>
              <div class="title txt-center"><%= __('forgot_password') %></div>
              <div class="sub mb-3 txt-center">
                <%= __('forgotpass_title') %>
              </div>

              <div class="mb-3">
                <input
                  type="email"
                  id="email"
                  placeholder="<%= __('email') %>"
                  required
                />
              </div>

              <button
                type="submit"
                id="sendButton"
                class="butn butn-primary mb-3 w-100"
              >
                <%= __('send_password_link') %>
              </button>

              <p>
                <%= __('go_back_login') %>
                <a href="/login"><%= __('login') %></a>
              </p>
            </form>
          </div>
        </div>
        <div class="bg">
          <img src="/public/images/authLoginBg.webp" alt="authBg" />
        </div>
      </div>
    </main>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.7/axios.min.js"
      integrity="sha512-DdX/YwF5e41Ok+AI81HI8f5/5UsoxCVT9GKYZRIzpLxb8Twz4ZwPPX+jQMwMhNQ9b5+zDEefc+dcvQoPWGNZ3g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script src="/public/js/languageSwitcher.js"></script>
    <script src="/public/js/config.js"></script>
    <script>
      const API_URL = apiBaseUrl;
      document.addEventListener("DOMContentLoaded", function () {
        const passResetForm = document.getElementById("passResetForm");
        const sendButton = document.getElementById("sendButton");
        const emailInput = document.getElementById("email");
        const subDiv = document.querySelector(".sub"); // Element for inserting the top error or success message

        // Email validation function
        function validateEmail(email) {
          const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return regex.test(email);
        }

        // Function to show a general message (error or success) at the top of the form
        function showTopMessage(message, isSuccess = false) {
          clearTopMessage();

          const messageDiv = document.createElement("div");
          messageDiv.className = `form-alert ${
            isSuccess ? "success" : "error"
          }`;
          messageDiv.textContent = message;

          // Insert the message below the .sub div (top of the form)
          subDiv.insertAdjacentElement("afterend", messageDiv);
        }

        // Function to clear any existing top message
        function clearTopMessage() {
          const existingMessage = document.querySelector(
            ".form-alert.success, .form-alert.error"
          );
          if (existingMessage) existingMessage.remove();
        }

        // Function to show a field-specific error message below the input
        function showFieldError(inputElement, message) {
          clearFieldError(inputElement);

          const errorDiv = document.createElement("div");
          errorDiv.className = "form-alert error";
          errorDiv.textContent = message;
          inputElement.parentNode.appendChild(errorDiv);
        }

        // Function to clear a field-specific error message
        function clearFieldError(inputElement) {
          const existingError =
            inputElement.parentNode.querySelector(".form-alert.error");
          if (existingError) existingError.remove();
        }

        // Function to validate the email field
        function validateForm() {
          let isValid = true;

          // Validate email
          if (!emailInput.value) {
            showFieldError(emailInput, "<%= __('email_required') %>");
            isValid = false;
          } else if (!validateEmail(emailInput.value)) {
            showFieldError(emailInput, "<%= __('invalid_email') %>");
            isValid = false;
          } else {
            clearFieldError(emailInput);
          }

          return isValid;
        }

        // Function to map API error messages to localized strings for forgot password
        function translateForgotPasswordError(apiMessage) {
          const translations = {
            "User not found": "<%= __('user_not_found') %>",
            // Add more mappings as needed...
          };
          return (
            translations[apiMessage] || "<%= __('forgot_password_failed') %>"
          );
        }

        // Form submission handler
        passResetForm.addEventListener("submit", function (event) {
          event.preventDefault(); // Prevent default form submission

          if (validateForm()) {
            sendButton.textContent = "<%= __('loading') %>";

            // Perform the forgot password request
            axios
              .post(`${API_URL}/auth/forgot-password`, {
                email: emailInput.value,
              })
              .then((response) => {
                // Show success message at the top of the form
                showTopMessage("<%= __('password_link_sent') %>", true);
                passResetForm.reset(); // Clear the form inputs
              })
              .catch((error) => {
                const apiMessage =
                  error.response && error.response.data.message
                    ? error.response.data.message
                    : null;
                const localizedMessage =
                  translateForgotPasswordError(apiMessage);
                showTopMessage(localizedMessage, false);
              })
              .finally(() => {
                sendButton.textContent = "<%= __('send_password_link') %>";
              });
          }
        });

        // Real-time email validation on blur
        emailInput.addEventListener("blur", function () {
          if (!emailInput.value) {
            showFieldError(emailInput, "<%= __('email_required') %>");
          } else if (!validateEmail(emailInput.value)) {
            showFieldError(emailInput, "<%= __('invalid_email') %>");
          } else {
            clearFieldError(emailInput);
          }
        });
      });
    </script>
  </body>
</html>
