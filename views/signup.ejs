<!DOCTYPE html>
<html lang="<%- __('lang') %>">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="shortcut icon"
      href="/public/images/linkhub-icon.png"
      type="image/x-icon"
    />
    <title>Signup | LinkHub</title>
    <link rel="stylesheet" href="/public/style/theme.css" />
    <style>
      .languageSwitcher {
        position: absolute;
        right: 20px;
        top: 20px;
      }
    </style>
  </head>
  <body>
    <main>
      <div class="auth-wrapper">
        <div class="auth" style="position: relative">
          <div class="logo">
            <img src="/public/images/logo-f1.svg" alt="logo" />
          </div>
          <div class="languageSwitcher me-1">
            <div class="toggle">
              <img src="/public/flags/en.svg" alt="flag" />
            </div>
            <div class="dropdown" style="right: 0">
              <div class="item" data-value="en">
                <img src="/public/flags/gb.svg" alt="flag" />
                <span><%= __("English") %></span>
              </div>
              <div class="item" data-value="fr">
                <img src="/public/flags/fr.svg" alt="flag" />
                <span><%= __("French") %></span>
              </div>
              <div class="item" data-value="de">
                <img src="/public/flags/de.svg" alt="flag" />
                <span><%= __("German") %></span>
              </div>
              <div class="item" data-value="it">
                <img src="/public/flags/it.svg" alt="flag" />
                <span><%= __("Italian") %></span>
              </div>
              <div class="item" data-value="pt">
                <img src="/public/flags/pt.svg" alt="flag" />
                <span><%= __("Portuguese") %></span>
              </div>
              <div class="item" data-value="es">
                <img src="/public/flags/es.svg" alt="flag" />
                <span><%= __("Spanish") %></span>
              </div>
              <div class="item" data-value="tr">
                <img src="/public/flags/tr.svg" alt="flag" />
                <span><%= __("Turkish") %></span>
              </div>
            </div>
          </div>
          <div class="max-500">
            <form id="regForm" novalidate>
              <div class="title txt-center"><%= __('new_account') %></div>
              <div class="sub mb-3 txt-center"><%= __('signup_title') %></div>

              <div class="mb-3">
                <input
                  type="email"
                  id="email"
                  placeholder="<%= __('email') %>"
                  required
                />
              </div>

              <div class="mb-3">
                <input
                  type="password"
                  id="password"
                  placeholder="<%= __('password') %>"
                  required
                />
              </div>
              <div class="mb-3">
                <label class="check-container"
                  ><%-__('mail_list_consent') %>
                  <input type="checkbox" checked="checked" />
                  <span class="checkmark"></span>
                </label>
              </div>
              <button
                type="submit"
                id="signupButton"
                class="butn butn-primary mb-3 w-100"
              >
                <%= __('signup') %>
              </button>

              <p>
                <%= __('already_have_account') %>
                <a href="/login"><%= __('login') %></a>
              </p>
            </form>
          </div>
        </div>
        <div class="bg">
          <img src="/public/images/authLoginBg.webp" alt="authBg" />
        </div>
      </div>
    </main>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.7/axios.min.js"
      integrity="sha512-DdX/YwF5e41Ok+AI81HI8f5/5UsoxCVT9GKYZRIzpLxb8Twz4ZwPPX+jQMwMhNQ9b5+zDEefc+dcvQoPWGNZ3g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script src="/public/js/languageSwitcher.js"></script>
    <script src="/public/js/config.js"></script>
    <script>
      const API_URL = apiBaseUrl;
      document.addEventListener("DOMContentLoaded", function () {
        const regForm = document.getElementById("regForm");
        const signupButton = document.getElementById("signupButton");
        const emailInput = document.getElementById("email");
        const passwordInput = document.getElementById("password");
        const subDiv = document.querySelector(".sub");

        // Email validation function
        function validateEmail(email) {
          const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return regex.test(email);
        }

        // Function to show a success message below the sub div
        function showSuccessMessage() {
          clearMessages(); // Clear any existing messages

          const successDiv = document.createElement("div");
          successDiv.className = "form-alert success mb-4";
          // Insert translated message text
          successDiv.innerHTML =
            "<%= __('signup_success') %> <div><a href='/login'><%= __('login') %></a></div>";
          subDiv.insertAdjacentElement("afterend", successDiv);
        }

        // Function to show field-specific error message below the input
        function showFieldError(inputElement, message) {
          clearFieldError(inputElement); // Clear any existing error for the field

          const errorDiv = document.createElement("div");
          errorDiv.className = "form-alert error";
          errorDiv.textContent = message;
          inputElement.parentNode.appendChild(errorDiv);
        }

        // Function to clear a field-specific error message
        function clearFieldError(inputElement) {
          const existingError =
            inputElement.parentNode.querySelector(".form-alert.error");
          if (existingError) existingError.remove();
        }

        // Function to show a general error message below the sub div
        function showErrorMessage(message) {
          clearMessages(); // Clear any existing messages

          const errorDiv = document.createElement("div");
          errorDiv.className = "form-alert error";
          errorDiv.textContent = message;
          subDiv.insertAdjacentElement("afterend", errorDiv);
        }

        // Function to clear all messages
        function clearMessages() {
          const existingMessages = document.querySelectorAll(
            ".form-alert.success, .form-alert.error"
          );
          existingMessages.forEach((msg) => msg.remove());
        }

        // Function to validate the form
        function validateForm() {
          let isValid = true;

          // Email validation
          if (!validateEmail(emailInput.value)) {
            showFieldError(emailInput, "<%= __('invalid_email') %>");
            isValid = false;
          } else {
            clearFieldError(emailInput);
          }

          // Password validation
          if (!passwordInput.value) {
            showFieldError(passwordInput, "<%= __('password_required') %>");
            isValid = false;
          } else {
            clearFieldError(passwordInput);
          }

          return isValid;
        }

        // Function to map API error messages to localized strings via i18n
        function translateApiError(apiMessage) {
          const translations = {
            "Email is already registered":
              "<%= __('email_already_registered') %>",
            "Failed to send verification email. Please try again.":
              "<%= __('failed_verification_email') %>",
          };
          return translations[apiMessage] || "<%= __('signup_failed') %>";
        }

        // Form submission handler
        regForm.addEventListener("submit", function (event) {
          event.preventDefault();

          if (validateForm()) {
            signupButton.textContent = "<%= __('loading') %>";

            axios
              .post(`${API_URL}/auth/signup`, {
                email: emailInput.value,
                password: passwordInput.value,
              })
              .then((response) => {
                showSuccessMessage();
                regForm.reset(); // Clear the form inputs
              })
              .catch((error) => {
                const apiMessage =
                  error.response && error.response.data.message
                    ? error.response.data.message
                    : null;
                const localizedMessage = translateApiError(apiMessage);
                showErrorMessage(localizedMessage);
              })
              .finally(() => {
                signupButton.textContent = "<%= __('signup') %>";
              });
          }
        });

        // Real-time email validation
        emailInput.addEventListener("input", function () {
          if (emailInput.value && !validateEmail(emailInput.value)) {
            showFieldError(emailInput, "<%= __('invalid_email') %>");
          } else {
            clearFieldError(emailInput);
          }
        });

        // Password validation on blur
        passwordInput.addEventListener("blur", function () {
          if (!passwordInput.value) {
            showFieldError(passwordInput, "<%= __('password_required') %>");
          } else {
            clearFieldError(passwordInput);
          }
        });
      });
    </script>
  </body>
</html>
